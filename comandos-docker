Listar containers:
    docker ps
    docker ps -a --lista todos os container que já foram executados.

Rodando um container:
    docker run <nome_imagem>    
    docker run it <nome_imagem> <comando_executado_no_container>
    sendo que: it (-i e -t) -i modo iterativo, -t permite digitar comandos.
    exemplo: docker run it ubuntu bash

    docker run -d -p 80:80 nginx
    sendo que -d é de detached (libera o terminal)

    docker run -d --name nginx nginx
    sendo que --name é para nomear o container.

Removendo container:
    docker --rm <nome_imagem> || docker --rm <id_imagem>
    docker --rm <nome_imagem> -f || docker --rm <id_imagem> -f
    sendo que -f é para forçar

    docker rm $(docker ps -a -q) -f 
    remove todos os containers sem precisar digitar cada id

Inicializando container:
    docker start <id_imagem>

Parando container:
    docker stop <id_container>    

Executando um comando no container:
    docker exec <id_container> OU <nome_container> <comando_a_ser_executado>    

    Exemplo: docker exec -it <id_ou_nome_container> bash
    sendo que: it (-i e -t) -i modo iterativo, -t permite digitar comandos.  

Mapeando um volume local para o container:
    docker run -d --name nginx -p 8080:80 -v /home/andre/Documentos/html/:/usr/share/nginx/html nginx

    Sendo que: /home/andre/Documentos/html/ é o nosso arquivo e :/usr/share/nginx/html e o local onde nosso arquivo será mapeado.
    -v é o comando para o mapeamento.
       
Nginx:
    docker run -p 8080:80 nginx
    sendo que -p (publish) estamos mapeando a nossa porta 8080 com a porta 80
    do container.

Atachando um container:
    docker attach <nome_imagem>|<id_container>    

Executando um container:
    docker exec -it <nome_imagem>|<id_container> <comando>
    Exemplo: docker exec -it ubuntu bash    

==============================================================================
Volumes:

Listando os volume:
    docker volume ls

Criando um volume:
    docker volume create <nome_volume>

Detalhando um volume:
    docker volume inspect <nome_volume>    

Mapeando um volume para o container:
    docker run --name <nome_container> -d -v <nome_volume>:/<alvo_container> nginx
    exemplo: docker run --name nginx -d -v meuVolume:/app nginx

Limpando os volume que não estão sendo utilizados:
    docker volume prune    

==============================================================================
Imagens:

Listando Imagens:
    docker images

Baixnado imagens:
    docker pull <nome_imagem>

Removendo imagens:
    docker rmi <nome_imagem>/<id_imagem>
    
Criando nossa imagem:    
    docker build -t <nome_que_queremos_para_imagem> <caminho_diretorio>
    exemplo: docker build -t devandreferreira/nginx-com-vim:latest . 
    sendo que "." é o diretório atual    

=============================================================================
Network:
# bridge -> rede onde um container se comunica com o outro - rede default
# é possível pingar containers pelo ip, porém não pelo dns
# host -> cria uma rede entre o container e a minha própria máquina
# overlay -> vários containers se comunicam como se estivem na mesma rede, exemplo: docker swarn
# none -> sem rede

Listando redes:
    docker network ls

Removendo redes não utilizadas:
    docker network prune

Inspecionando as redes dos containers:
    docker network inspect bridge

Criando nossa própria rede:
    docker network create --driver bridge <nome_rede>

Associando uma rede ao container:
    docker -dit --name <nome_container> --network <nome_rede> <nome_container>
    Exemplo: docker run -dit --name ubuntu --network minharede bash






    